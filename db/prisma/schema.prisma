// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int              @id @default(autoincrement())
  name          String?
  email         String?          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]        @relation("UserAccounts")
  sessions      Session[]        @relation("UserSessions")
  bookings      Booking[]        @relation("UserBookings")
}

model Account {
  id                Int      @id @default(autoincrement())
  userId            Int
  provider          String
  providerAccountId String
  type              String
  access_token      String?
  expires_at        Int?
  id_token          String?
  refresh_token     String?
  scope             String?
  session_state     String?
  token_type        String?
  user              User     @relation("UserAccounts", fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation("UserSessions", fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Venues {
  id        Int  @id @default(autoincrement())
  name      String @unique
  image     String?
  location  String
  description String
  bookings    Booking[]
}

model Booking {
  id        Int      @id @default(autoincrement())
  venueId   Int
  userId    Int
  date      DateTime
  venue     Venues   @relation(fields: [venueId], references: [id])
  user      User     @relation("UserBookings",fields: [userId], references: [id])
}
